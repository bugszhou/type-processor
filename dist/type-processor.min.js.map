{"version":3,"file":"type-processor.min.js","sources":["../src/DefaultProcessor.ts","../src/ProcessorBase.ts","../src/index.ts"],"sourcesContent":["import ProcessorBase from \"./ProcessorBase\";\n\nexport default class DefaultProcessor implements ProcessorBase {\n  private elementData = null;\n\n  constructor(options: any) {\n    this.elementData = options;\n  }\n\n  getData() {\n    return this.elementData;\n  }\n\n  process() {\n    console.error(`No Processor, currentElement is ${this.getData()}`);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nexport interface IProcessor<IReturn = any> {\n  getData(): IReturn;\n  process(): IReturn | Promise<IReturn>;\n}\n\nabstract class ProcessorBase implements IProcessor {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  constructor(opts?: any) {}\n\n  abstract getData(): any;\n  abstract process(): any;\n}\n\nexport type IProcessorType<T extends abstract new (...opts: any[]) => any> = {\n  new (...opts: any[]): InstanceType<T>;\n};\n\nexport default ProcessorBase;\n","import DefaultProcessor from \"./DefaultProcessor\";\nimport ProcessorBase, { IProcessor, IProcessorType } from \"./ProcessorBase\";\n\nexport { ProcessorBase, IProcessorType };\n\nexport default class TypeProcessor<IReturn = any> {\n  /**\n   * 重写类型映射\n   */\n  protected processorsMapping: Record<\n    number | string,\n    IProcessorType<typeof ProcessorBase>\n  > = {};\n\n  /**\n   * 覆盖老的映射关系或者新增映射关系\n   */\n  protected moreProcessorsMapping: Record<\n    number | string,\n    IProcessorType<typeof ProcessorBase>\n  > = {};\n\n  private currentElement: string | number = \"\";\n\n  private updateTypeMapping() {\n    if (!this.processorsMapping) {\n      this.processorsMapping = {};\n    }\n    this.processorsMapping = {\n      ...this.processorsMapping,\n      ...this.moreProcessorsMapping,\n    };\n  }\n\n  getCurrentElement() {\n    return this.currentElement;\n  }\n\n  setCurrentElement(val: number | string) {\n    this.currentElement = val;\n  }\n\n  getActor(params?: any): IProcessor<IReturn> | undefined {\n    this.updateTypeMapping();\n    try {\n      const Actor =\n        this.processorsMapping[this.getCurrentElement()] || DefaultProcessor;\n\n      if (!Actor) {\n        return;\n      }\n\n      const actor = new Actor(params);\n\n      return actor;\n    } catch (e) {\n      console.error(e);\n      return;\n    }\n  }\n}\n"],"names":["DefaultProcessor","options","this","elementData","prototype","getData","process","console","error","concat","ProcessorBase","opts","TypeProcessor","processorsMapping","moreProcessorsMapping","currentElement","updateTypeMapping","__assign","getCurrentElement","setCurrentElement","val","getActor","params","Actor","e","exports","Object","defineProperty","value"],"mappings":";;;;;;;;;;;;;;oSAEAA,EAAA,WAGE,SAAAA,EAAYC,GAFJC,KAAWC,YAAG,KAGpBD,KAAKC,YAAcF,EAUvB,OAPED,EAAAI,UAAAC,QAAA,WACE,OAAOH,KAAKC,aAGdH,EAAAI,UAAAE,QAAA,WACEC,QAAQC,MAAM,mCAAmCC,OAAAP,KAAKG,aAEzDL,KCVDU,EAEE,SAAYC,KCHdC,EAAA,WAAA,SAAAA,IAIYV,KAAiBW,kBAGvB,GAKMX,KAAqBY,sBAG3B,GAEIZ,KAAca,eAAoB,GAsC5C,OApCUH,EAAAR,UAAAY,kBAAR,WACOd,KAAKW,oBACRX,KAAKW,kBAAoB,IAE3BX,KAAKW,kBAAiBI,EAAAA,EAAA,GACjBf,KAAKW,mBACLX,KAAKY,wBAIZF,EAAAR,UAAAc,kBAAA,WACE,OAAOhB,KAAKa,gBAGdH,EAAiBR,UAAAe,kBAAjB,SAAkBC,GAChBlB,KAAKa,eAAiBK,GAGxBR,EAAQR,UAAAiB,SAAR,SAASC,GACPpB,KAAKc,oBACL,IACE,IAAMO,EACJrB,KAAKW,kBAAkBX,KAAKgB,sBAAwBlB,EAEtD,IAAKuB,EACH,OAKF,OAFc,IAAIA,EAAMD,GAGxB,MAAOE,GAEP,YADAjB,QAAQC,MAAMgB,KAInBZ,KAAAa,EAAAf,cAAAA,EAAAe,EAAA,QAAAb,EAAAc,OAAAC,eAAAF,EAAA,aAAA,CAAAG,OAAA"}